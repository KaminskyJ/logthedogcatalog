{"version":3,"sources":["logo.svg","ConnectAPI.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ConnectAPI","state","result","axios","get","then","response","setState","data","catch","error","console","log","this","Component","App","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","React","Container","fluid","src","logo","alt","target","rel","min","max","step","defaultValue","disabled","placeholder","type","style","marginLeft","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,kC,uRC6B5BC,E,kDAzBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,OAAQ,WAHF,E,iEAOQ,IAAD,OACjBC,IAAMC,IAAI,cACLC,MAAK,SAACC,GACH,EAAKC,UAAS,WACV,MAAO,CAAEL,OAAQI,EAASE,YAGjCC,OAAM,SAAUC,GACbC,QAAQC,IAAIF,Q,+BAMpB,OAAO,4BAAKG,KAAKZ,MAAMC,Y,GAvBNY,a,2BC4BVC,E,uKAxBP,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,cAAcC,QAAQ,QAAQC,OAAO,MAC5C,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACf,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,WAAWL,GAAG,sBAC7B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,kBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,aACA,kBAACQ,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBV,KAAK,eAAvB,2B,GAhBNY,IAAMnB,W,SC4DTC,MAtDf,WACE,OACE,oCAEA,yBAAKY,UAAU,OACb,kBAACO,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,EAAD,OAEF,4BAAQR,UAAU,cAEhB,yBAAKS,IAAKC,IAAMV,UAAU,WAAWW,IAAI,SACzC,8CAGA,kBAAC,EAAD,MACA,uBACEX,UAAU,WACVN,KAAK,sBACLkB,OAAO,SACPC,IAAI,uBAJN,2BAQA,6BACE,kBAAC,IAAD,CAAQC,IAAK,EAAGC,IAAK,IAAKC,KAAM,EAAGC,aAAc,GAAIC,UAAU,IAC/D,kBAAC,IAAD,CAAOC,YAAa,QAASC,KAAM,OAAQC,MAAO,KAClD,kBAAC,IAAD,CAAQD,KAAK,UAAUC,MAAO,CAAEC,WAAY,IAA5C,YAKJ,yBAAKtB,UAAU,kBACb,qCACA,2BAAOuB,QAAQ,oBAAf,eAGA,8BACEzB,GAAG,qBAEL,sCACA,yBACEE,UAAU,gBCvCAwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdxD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwD,c","file":"static/js/main.366a25e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport axios from 'axios';\nclass ConnectAPI extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            result: 'pending'\n        }\n    }\n\n    componentWillMount() {\n        axios.get('/api/hello')\n            .then((response) => {\n                this.setState(() => {\n                    return { result: response.data }\n                })\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n\n    }\n\n    render() {\n        return <h1>{this.state.result}</h1>;\n    }\n}\n\nexport default ConnectAPI;","import React from 'react';\nimport {Navbar, Nav, NavDropdown} from 'react-bootstrap';\n\n\nclass App extends React.Component {\n      render() {\n        return (\n          <>\n            <Navbar bg=\"transparent\" variant='light' expand=\"lg\">\n                <Navbar.Brand href=\"#home\">Logtheanalogdog</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#link\">Link</Nav.Link>\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n          </>\n        );\n      }\n}\n\nexport default App;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Slider , Input} from 'antd';\nimport \"antd/dist/antd.css\";\nimport ConnectAPI from './ConnectAPI';\nimport Navbar from './NavBar';\nimport { Container } from 'react-bootstrap'\n\n\nfunction App() {\n  return (\n    <>\n    \n    <div className=\"App\" >\n      <Container fluid>\n        <Navbar />\n      </Container>\n      <header className=\"App-header\">\n        \n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Dog Recommender\n        </p>\n        <ConnectAPI />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Input your expectations\n        </a>\n        <div>\n          <Slider min={0} max={100} step={1} defaultValue={30} disabled={false}></Slider>\n          <Input placeholder={\"input\"} type={\"text\"} style={{}}></Input>\n          <Button type=\"primary\" style={{ marginLeft: 8 }}>\n            Search\n          </Button>\n        </div>\n      </header>\n      <div className=\"MarkdownEditor\">\n        <h3>Input</h3>\n        <label htmlFor=\"markdown-content\">\n          Enter words\n        </label>\n        <textarea\n          id=\"markdown-content\"\n        />\n        <h3>Output</h3>\n        <div\n          className=\"content\"\n        />\n      </div>\n\n\n\n    </div>\n\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}